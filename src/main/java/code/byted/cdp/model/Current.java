/*
 * Copyright 2022 ByteDance and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * CDP开放接口
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package code.byted.cdp.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Current
 */

@javax.annotation.Generated(value = "code.byted.cdp.client.JavaClientCodegen", date = "2023-04-18T11:26:59.028+08:00[Asia/Shanghai]")
public class Current {
  @SerializedName("columnId")
  private Integer columnId = null;

  @SerializedName("dateWithTime")
  private Boolean dateWithTime = null;

  @SerializedName("intervalType")
  private String intervalType = null;

  @SerializedName("todayIncluded")
  private Boolean todayIncluded = null;

  public Current columnId(Integer columnId) {
    this.columnId = columnId;
    return this;
  }

   /**
   * Get columnId
   * @return columnId
  **/
  @Schema(description = "")
  public Integer getColumnId() {
    return columnId;
  }

  public void setColumnId(Integer columnId) {
    this.columnId = columnId;
  }

  public Current dateWithTime(Boolean dateWithTime) {
    this.dateWithTime = dateWithTime;
    return this;
  }

   /**
   * Get dateWithTime
   * @return dateWithTime
  **/
  @Schema(description = "")
  public Boolean isDateWithTime() {
    return dateWithTime;
  }

  public void setDateWithTime(Boolean dateWithTime) {
    this.dateWithTime = dateWithTime;
  }

  public Current intervalType(String intervalType) {
    this.intervalType = intervalType;
    return this;
  }

   /**
   * Get intervalType
   * @return intervalType
  **/
  @Schema(required = true, description = "")
  public String getIntervalType() {
    return intervalType;
  }

  public void setIntervalType(String intervalType) {
    this.intervalType = intervalType;
  }

  public Current todayIncluded(Boolean todayIncluded) {
    this.todayIncluded = todayIncluded;
    return this;
  }

   /**
   * Get todayIncluded
   * @return todayIncluded
  **/
  @Schema(description = "")
  public Boolean isTodayIncluded() {
    return todayIncluded;
  }

  public void setTodayIncluded(Boolean todayIncluded) {
    this.todayIncluded = todayIncluded;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Current current = (Current) o;
    return Objects.equals(this.columnId, current.columnId) &&
        Objects.equals(this.dateWithTime, current.dateWithTime) &&
        Objects.equals(this.intervalType, current.intervalType) &&
        Objects.equals(this.todayIncluded, current.todayIncluded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnId, dateWithTime, intervalType, todayIncluded);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Current {\n");
    
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    dateWithTime: ").append(toIndentedString(dateWithTime)).append("\n");
    sb.append("    intervalType: ").append(toIndentedString(intervalType)).append("\n");
    sb.append("    todayIncluded: ").append(toIndentedString(todayIncluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
